name: CI/CD Pipeline for Project

on:
  push:
    branches:
      - main

env:
  GKE_CLUSTER: dwk-cluster
  GKE_ZONE: europe-north1-b
  IMAGE_APP: todo-app
  IMAGE_BACKEND: todo-backend
  SERVICE_APP: todo-app-dep
  SERVICE_BACKEND: todo-backend-dep
  BRANCH: ${{ github.ref_name }}

jobs:
  build-publish-deploy:
    name: Build, Publish and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}

    - name: Extract PROJECT_ID from GKE_SA_KEY
      run: echo "PROJECT_ID=$(echo '${{ secrets.GKE_SA_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 'Use gcloud CLI'
      run: gcloud info 

    - run: gcloud --quiet auth configure-docker

    - name: 'Get GKE credentials'
      uses: 'google-github-actions/get-gke-credentials@v2'
      with:
        cluster_name: '${{ env.GKE_CLUSTER }}'
        project_id: '${{ env.PROJECT_ID }}'
        location: '${{ env.GKE_ZONE }}'

    - name: Install SOPS
      run: |
        curl -Lo sops https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux.amd64
        chmod +x sops
        sudo mv sops /usr/local/bin/sops

    - name: Set up AGE private key for decryption
      run: |
        mkdir -p /home/runner/.config/sops/age  # Ensure the directory exists
        echo "${{ secrets.AGE_PRIVATE_KEY }}" > /home/runner/.config/sops/age/keys.txt  # Store the private key
      env:
        AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}  # Reference the private key stored in GitHub Secrets

    - name: Decrypt the postgres secret
      run: sops -d todo-backend/manifests/postgres-secret.enc.yaml > todo-backend/manifests/postgres-secret.yaml



    # Build and publish todo-app image
    - name: Build todo-app
      run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_APP:$BRANCH-$GITHUB_SHA" -f Project/Dockerfile .

    - name: Publish todo-app image
      run: docker push "gcr.io/$PROJECT_ID/$IMAGE_APP:$BRANCH-$GITHUB_SHA"

   
    # Build and publish todo-backend image
    - name: Build todo-backend
      run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_BACKEND:$BRANCH-$GITHUB_SHA" -f todo-backend/Dockerfile .

    - name: Publish todo-backend image
      run: docker push "gcr.io/$PROJECT_ID/$IMAGE_BACKEND:$BRANCH-$GITHUB_SHA"

    - name: Set up Kustomize
      uses: imranismail/setup-kustomize@v2.1.0

    - name: Deploy todo-app
      run: |
        cd Project
        kustomize edit set image gcr.io/$PROJECT_ID/$IMAGE_APP=$IMAGE_APP:$BRANCH-$GITHUB_SHA
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment $SERVICE_APP -n project-namespace
        kubectl get services -o wide

    - name: Deploy todo-backend
      run: |
        cd todo-backend
        kustomize edit set image gcr.io/$PROJECT_ID/$IMAGE_BACKEND=$IMAGE_BACKEND:$BRANCH-$GITHUB_SHA
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment $SERVICE_BACKEND -n project-namespace
        kubectl get services -o wide